require 'timeout'
require_relative '../logger'
require_relative '../human_eval/assert'
require_relative '../solver'
require_relative '../report/generator'
require_relative '../model/to_path'
require_relative '../models'
require_relative 'report'

module Runner
  # –ö–ª–∞—Å—Å Runner –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á
  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –º–æ–¥–µ–ª–∏, —Å–æ–±–∏—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  # –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  class Runner
    include Logger
    include Report

    DONE_MARK = "\e[32m‚úì\e[0m".freeze # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    FAIL_MARK = "\e[31m‚úó\e[0m".freeze # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç

    def initialize(options = {})
      @options = options
      @results = {}
      self.log_level = @options[:log_level] || :normal
      @timeout = @options[:timeout] || 5 # –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
    end

    def run_tests(task: nil, model: nil)
      # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if task && !task.to_s.match?(/^t\d+$/)
        error "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
        return {}
      end

      if model && !model.to_s.match?(/^[a-zA-Z0-9_-]+$/) && !model.to_s.match?(%r{^[a-zA-Z0-9/_:-]+$})
        error '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏'
        return {}
      end

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      tasks_to_run = if task
                       [task]
                     else
                       find_solution_files.map { |f| File.basename(f).gsub(/-.*$/, '') }.uniq.sort
                     end

      if tasks_to_run.empty?
        error '–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏'
        return {}
      end

      @results = Hash.new { |h, k| h[k] = {} }
      has_solutions = false
      models_manager = Models.new

      tasks_to_run.each do |current_task|
        test_file = "tasks/#{current_task}-assert.rb"
        unless File.exist?(test_file)
          error "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ #{test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
          next
        end

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        solutions = if model
                      if model.include?('/') || model.include?(':') || model.include?('-')
                        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏, –∏—â–µ–º –∫–ª—é—á –º–æ–¥–µ–ª–∏
                        # –∏ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º Model::ToPath –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—É—Ç—å
                        path_name = Model::ToPath.to_path(model)
                        solution = Dir.glob("tasks/#{current_task}-#{path_name}.rb").first
                      else
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –∫–∞–∫ –µ—Å—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –∫–ª—é—á –º–æ–¥–µ–ª–∏)
                        path_name = model
                        solution = Dir.glob("tasks/#{current_task}-#{path_name}.rb").first
                      end
                      solution ? [solution] : []
                    else
                      find_solution_files(current_task)
                    end

        if solutions.empty?
          error "–†–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{current_task} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          next
        end

        has_solutions = true

        solutions.each do |solution|
          model_path_name = File.basename(solution).split('-')[1..].join('-').sub('.rb', '')
          # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          original_model_name = Model::ToPath.from_file_path(solution, models_manager) || model_path_name
          normal_log "Testing solution #{solution} for model #{original_model_name}"
          success = test_solution(current_task, solution)
          debug_log "Test result for #{original_model_name}: #{success}"
          @results[current_task][original_model_name] = success
        rescue => e
          debug_log "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ #{solution}: #{e.message}"
          original_model_name = Model::ToPath.from_file_path(solution, models_manager) || model_path_name
          @results[current_task][original_model_name] = false
        end
      end

      # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ö—ç—à
      return {} unless has_solutions

      # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
      if @options[:report]
        report_data = {
          model_stats: get_model_stats,
          task_results: @results
        }
        Report::Generator.new(report_data).generate_all
      end
      
      # –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
      # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
      models_list = models
      # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      display_total_console(tasks_to_run, models_list)

      @results
    end

    def get_model_stats
      # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks
      solutions = Dir.glob('tasks/t*-*.rb').reject { |f| f.end_with?('-assert.rb') }
      tasks = solutions.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort
      models_manager = Models.new

      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      models = solutions.map do |f|
        Model::ToPath.from_file_path(f, models_manager) || 
          (File.basename(f).split('-')[1..].join('-').sub('.rb', ''))
      end.compact.uniq.sort

      return [] if models.empty? || tasks.empty? || @results.empty?

      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        total_tasks = tasks.count { |task| @results[task]&.key?(model) }
        next nil if total_tasks.zero? # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        passed_tasks = tasks.count { |task| @results[task][model] == true }
        percentage = total_tasks > 0 ? (passed_tasks * 100.0 / total_tasks).round : 0
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        [model, passed_tasks, total_tasks, percentage]
      end.compact

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, _, _, percentage| -percentage }

      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      model_stats
    end

    def log_error_details(error)
      debug_log '  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:'
      error_class = error[:class] || 'Unknown error'
      debug_log "     #{error_class}: #{error[:message]}"
      debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
      if error[:backtrace]&.any?
        error[:backtrace].each { |line| debug_log "       #{line}" }
      else
        debug_log '       –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      end
    end

    private

    def models
      models_manager = Models.new
      find_solution_files.map do |f|
        # –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        Model::ToPath.from_file_path(f, models_manager) || 
          (File.basename(f).split('-')[1..].join('-').sub('.rb', ''))
      end.compact.uniq.sort
    end

    def tasks
      find_solution_files
        .map { |f| File.basename(f) }
        .map { |f| f.gsub(/-.*$/, '') }
        .uniq
        .sort
    end

    def file_exists?(file)
      return true if File.exist?(file)

      error "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(file)}:"
      error "  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: #{file}"
      false
    end

    def test_solution(task, solution_file)
      test_file = "tasks/#{task}-assert.rb"

      return false unless file_exists?(solution_file)
      return false unless file_exists?(test_file)

      begin
        test_content = File.read(test_file)
        test_lines = test_content.lines.map(&:strip).reject { |line| line.empty? || line.start_with?('#') }

        if test_lines.empty?
          debug_log '  ‚ùå –¢–µ—Å—Ç —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
          return false
        end

        solution_content = File.read(solution_file)

        debug_log '  üìù –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ä–µ—à–µ–Ω–∏—è...'
        temp_context = Module.new
        temp_context.module_eval(solution_content)
        debug_log '  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      rescue SyntaxError => e
        debug_log '  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏:'
        debug_log "     #{e.message}"
        return false
      rescue => e
        debug_log '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:'
        debug_log "     #{e.class}: #{e.message}"
        debug_log '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      end

      test_context = Module.new do
        include HumanEval::Assert
        include Logger

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Ruby —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        %w[prime set json date time base64 digest securerandom pathname].each do |lib|
          require lib
        rescue LoadError => e
          debug_log "  ‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ #{lib} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: #{e.message}"
        end

        class << self
          attr_accessor :log_level, :options
        end

        def self.handle_error(e)
          debug_log "Handling error: #{e.class} - #{e.message}"
          debug_log "Backtrace: #{e.backtrace&.join("\n")}"
          {
            status: :error,
            error: {
              class: e.class.name,
              message: e.message || 'Unknown error',
              backtrace: e.backtrace || []
            }
          }
        end

        begin
          module_eval(solution_content)
        rescue => e
          log_solution_load_error(e)
        end

        extend self
      end

      test_context.log_level = @options[:log_level] || :normal

      begin
        test_content = File.read(test_file)
        debug_log '  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...'
        debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–∞:'
        debug_log test_content
        debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è:'
        debug_log solution_content
        debug_log '  üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:'
        debug_log test_context.methods.sort.inspect

        result = Queue.new
        thread = Thread.new do
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
          test_context = Module.new do
            include HumanEval::Assert
            include Logger

            class << self
              attr_accessor :log_level, :options
            end

            def self.handle_error(e)
              debug_log "Handling error: #{e.class} - #{e.message}"
              debug_log "Backtrace: #{e.backtrace&.join("\n")}"
              {
                status: :error,
                error: {
                  class: e.class.name,
                  message: e.message || 'Unknown error',
                  backtrace: e.backtrace || []
                }
              }
            end
          end

          begin
            test_context.module_eval(solution_content)
          rescue => e
            log_solution_load_error(e)
          end

          test_context.extend(test_context)
          test_context.log_level = @options[:log_level] || :normal
          test_context.options = @options.dup # –î–æ–±–∞–≤–ª—è–µ–º .dup —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏

          begin
            debug_log '  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...'
            debug_log "  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è #{File.basename(solution_file)}..."

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
            debug_log '  üìù –¢–µ—Å—Ç—ã:'
            test_lines = test_content.split("\n")
            test_lines.each_with_index do |line, idx|
              next if line.strip.empty?

              line_number = idx + 1
              debug_log "     #{line_number}: #{line.strip}"

              begin
                test_context.module_eval(line)
              rescue HumanEval::Assert::AssertionError => e
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
                File.basename(solution_file).split('-')[1..].join('-').sub('.rb', '')
                task = File.basename(solution_file).split('-').first

                debug_log "\n  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ #{line_number}:"
                debug_log "     #{line.strip}"

                if e.expected && e.actual
                  debug_log "     –û–∂–∏–¥–∞–ª–æ—Å—å: #{e.expected.inspect}"
                  debug_log "     –ü–æ–ª—É—á–µ–Ω–æ: #{e.actual.inspect}"
                end

                result.push({
                              status: :error,
                              error: {
                                class: e.class.name,
                                message: e.message,
                                expected: e.expected,
                                actual: e.actual,
                                line: line_number,
                                test: line.strip
                              }
                            })
                return false
              end
            end

            debug_log '  ‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
            result.push({ status: :success })
          rescue => e
            debug_log "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.class} - #{e.message}"
            debug_log "  ‚ùå –û—à–∏–±–∫–∞: #{e.message || 'Unknown error'}"
            result.push(test_context.handle_error(e))
          rescue Exception => e
            debug_log "  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.class} - #{e.message}"
            result.push({
                          status: :error,
                          error: {
                            class: e.class.name,
                            message: e.message || 'Unknown error',
                            backtrace: e.backtrace || []
                          }
                        })
          end
        end

        begin
          Timeout.timeout(@timeout) do
            debug_log '  ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...'
            res = result.pop
            debug_log "   –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: #{res.inspect}"
            case res[:status]
            when :success
              debug_log '  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
              return true
            when :error
              error = res[:error]
              log_error_details(error)
              return false
            else
              error "  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: #{res[:status]}"
              return false
            end
          end
        rescue Timeout::Error
          thread.kill
          thread.join(1) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
          debug_log "  ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (#{@timeout} —Å–µ–∫—É–Ω–¥)"
          debug_log '     –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª'
          false
        ensure
          thread.kill unless thread.nil? || !thread.alive?
        end
      rescue Interrupt => e
        error "\n  ‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)"
        debug_log "  üìç –ú–µ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: #{e.backtrace.first}"
        false
      rescue => e
        raise_log(e, '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞')
        false
      rescue Exception => e
        raise_log(e, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞')
        false
      end
    end

    def raise_log(e, msg)
      debug_log " ‚ùå #{msg}:"
      debug_log "    –¢–∏–ø: #{e.class}"
      debug_log "    –°–æ–æ–±—â–µ–Ω–∏–µ: #{e.message}"
      debug_log "    –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
      debug_log '    –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
      e.backtrace.each { |line| debug_log "       #{line}" }
    end

    def handle_timeout(thread)
      thread&.kill
      thread&.join(1) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      error "  ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (#{@timeout} —Å–µ–∫—É–Ω–¥)"
      error '     –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª'
      false
    end

    def display_results(tasks, models)
      # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
      if @options[:report]
        report_data = {
          model_stats: get_model_stats,
          task_results: @results
        }
        Report::Generator.new(report_data).generate_all
      end

      # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø—Ä–æ–≥–æ–Ω–∞ - –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
      display_total_console(tasks, models)
    end

    def find_solution_files(task = nil)
      pattern = task ? "tasks/#{task}-*.rb" : 'tasks/t*-*.rb'
      Dir.glob(pattern).reject { |f| f.end_with?('-assert.rb') }
    end
  end
end 