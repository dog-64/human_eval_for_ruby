# frozen_string_literal: true

require 'terminal-table'
require 'timeout'
require_relative '../human_eval/logger'
require_relative '../human_eval/assert'
require_relative '../human_eval/log_levels'
require 'shellwords'
require 'fileutils'
require_relative '../human_eval/solver'
require_relative '../human_eval/reports/generator'
require_relative 'test_executor'
require_relative 'stats_calculator'
require 'thor'

# –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ —Ä–µ—à–µ–Ω–∏–π
# @note –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á
#       –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module TestRunner
  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  # @attr_reader [Hash] options –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  # @attr_reader [Integer] timeout –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  # @attr_reader [Boolean] generate_reports –§–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
  class Runner
    include HumanEval::Logger
    include HumanEval::LogLevels
    include TestExecutor
    include StatsCalculator

    DONE_MARK = "\e[32m‚úì\e[0m" # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    FAIL_MARK = "\e[31m‚úó\e[0m" # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç

    attr_reader :options, :results, :log_level, :timeout, :report

    def initialize(options = {})
      @options = options
      @results = {}
      @log_level = options[:log_level] || :normal
      @timeout = options[:timeout] || 5
      @report = HumanEval::Reports::Generator.new(
        output_dir: 'reports',
        format: 'all',
        report_total: @options[:report_total]
      )
    end

    def debug_log(message)
      return unless @log_level == :debug
      puts "runner.rb:#{caller_locations(1,1)[0].lineno} [DEBUG] | #{message}"
    end

    def colorize(text, percentage)
      color = case percentage
              when 0..33 then "\e[31m" # –ö—Ä–∞—Å–Ω—ã–π
              when 34..66 then "\e[33m" # –ñ–µ–ª—Ç—ã–π
              else "\e[32m" # –ó–µ–ª–µ–Ω—ã–π
              end
      "#{color}#{text}\e[0m"
    end

    def run_all_tests
      tasks = find_solution_files.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort
      if tasks.empty?
        error '–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏'
        return {}
      end

      models = extract_models(find_solution_files)
      @results = Hash.new { |h, k| h[k] = {} }

      tasks.each do |task|
        task_solutions = find_solution_files(task)
        debug_log "Processing task #{task} with solutions: #{task_solutions.inspect}"

        task_solutions.each do |solution|
          model = extract_model_from_file(solution)
          debug_log "Testing solution #{solution} for model #{model}"
          success = test_solution(task, solution)
          debug_log "Test result for #{model}: #{success}"
          @results[task][model] = success
        end
      end

      debug_log "Final results: #{@results.inspect}"

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
      HumanEval::Reports::Generator.new(
        output_dir: 'reports',
        format: 'all',
        results: @results,
        tasks: tasks,
        models: models
      ).generate

      display_total_console(tasks, models)
      @results
    end

    def run_task_tests(task)
      unless task.to_s.match?(/^t\d+$/)
        error "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
        return {}
      end

      test_file = "tasks/#{task}-assert.rb"
      unless File.exist?(test_file)
        error "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ #{test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return {}
      end

      solutions = find_solution_files(task)
      if solutions.empty?
        error "–†–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return {}
      end

      models = extract_models(solutions)
      @results = Hash.new { |h, k| h[k] = {} }

      solutions.each do |solution|
        model = extract_model_from_file(solution)
        success = test_solution(task, solution)
        @results[task][model] = success
      end

      display_results([task], models)
      @results
    end

    def run_model_tests(task, model)
      @results = Hash.new { |h, k| h[k] = {} }
      
      unless model.to_s.match?(/^[a-zA-Z0-9_-]+$/)
        error '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏'
        return {}
      end

      if task.nil?
        run_all_model_tests(model)
      else
        run_single_model_test(task, model)
      end

      @results
    end

    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    # @return [Array<Array>] –ú–∞—Å—Å–∏–≤ –ø–∞—Ä [–º–æ–¥–µ–ª—å, –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤]
    def model_stats
      calculate_model_stats
    end

    def log_error_details(error)
      debug_log '  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:'
      debug_log "     #{error[:class]}: #{error[:message]}"
      if error[:backtrace]&.any?
        debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        error[:backtrace].each do |line|
          debug_log "       #{line}"
        end
      else
        debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        debug_log '       –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      end
    end

    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—á–µ—Ç–æ–≤
    # –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å. –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π
    # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.
    #
    # @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Reports::Generator –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞
    def create_reports(*)
      warn 'DEPRECATED: –ú–µ—Ç–æ–¥ create_reports —É—Å—Ç–∞—Ä–µ–ª –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Reports::Generator.'
    end

    private

    def test_solution(task, solution_file)
      test_file = "tasks/#{task}-assert.rb"
      model = extract_model_from_file(solution_file)

      return false unless validate_files(task, test_file, solution_file, model)
      return false unless validate_solution_content(solution_file, model, task)

      run_tests(task, test_file, solution_file, model)
    end

    def extract_model_from_file(solution_file)
      File.basename(solution_file).split('-')[1..].join('-').sub('.rb', '')
    end

    def validate_files(task, test_file, solution_file, model)
      unless File.exist?(solution_file)
        error "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        error "  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: #{solution_file}"
        @report.save_result(model: model, task: task, success: false)
        return false
      end

      unless File.exist?(test_file)
        error "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        error "  ‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{test_file}"
        @report.save_result(model: model, task: task, success: false)
        return false
      end

      true
    end

    def validate_solution_content(solution_file, model, task)
      solution_content = File.read(solution_file)
      if solution_content.strip.empty?
        error '  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –ø—É—Å—Ç'
        @report.save_result(model: model, task: task, success: false)
        return false
      end

      validate_syntax(solution_content, model, task)
    end

    def validate_syntax(solution_content, model, task)
      debug_log '  üìù –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ä–µ—à–µ–Ω–∏—è...'
      temp_context = Module.new
      temp_context.module_eval(solution_content)
      debug_log '  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      true
    rescue SyntaxError => e
      error '  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏:'
      error "     #{e.message}"
      @report.save_result(model: model, task: task, success: false)
      false
    rescue StandardError => e
      warn '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:'
      warn "     #{e.class}: #{e.message}"
      warn '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      true
    end

    def run_tests(task, test_file, solution_file, model)
      test_context = create_test_context(solution_file)
      test_content = File.read(test_file)

      debug_log '  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...'
      log_test_details(test_content, solution_file, test_context)

      result = execute_tests_in_thread(test_context, test_content, model, task)
      debug_log "  üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: #{result.inspect}"
      success = handle_test_result(result, model, task)
      debug_log "  ‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: #{success}"
      success
    rescue StandardError => e
      error "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.message}"
      @report.save_result(model: model, task: task, success: false)
      false
    end

    def create_test_context(solution_file)
      test_context = Module.new do
        include HumanEval::Assert
        include HumanEval::LogLevels

        class << self
          attr_accessor :log_level, :options
        end

        def self.handle_error(error)
          debug_log "Handling error: #{error.class} - #{error.message}"
          debug_log "Backtrace: #{error.backtrace&.join("\n")}"
          {
            status: :error,
            error: {
              class: error.class.name,
              message: error.message || 'Unknown error',
              backtrace: error.backtrace || []
            }
          }
        end
      end

      load_standard_libraries(test_context)
      load_solution(test_context, solution_file)
      configure_test_context(test_context)
      test_context
    end

    def load_standard_libraries(*)
      %w[prime set json date time base64 digest securerandom pathname].each do |lib|
        require lib
      rescue LoadError => e
        warn "  ‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ #{lib} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: #{e.message}"
      end
    end

    def load_solution(context, solution_file)
      solution_content = File.read(solution_file)
      context.module_eval(solution_content)
    rescue StandardError => e
      warn '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤:'
      warn "     #{e.class}: #{e.message}"
      warn '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
    end

    def configure_test_context(context)
      context.log_level = @options[:log_level] || :normal
      context.options = @options.dup
    end

    def execute_tests_in_thread(test_context, test_content, model, task)
      result = Queue.new
      thread = Thread.new do
        run_tests_in_context(test_context, test_content, result, model, task)
      end

      thread.join(@timeout)
      if thread.alive?
        thread.kill
        error "  ‚ùå –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (#{@timeout} —Å–µ–∫—É–Ω–¥)"
        @report.save_result(model: model, task: task, success: false)
        return { status: :timeout }
      end

      result.pop
    end

    def run_tests_in_context(test_context, test_content, result, model, task)
      test_lines = test_content.split("\n")
      test_lines.each_with_index do |line, idx|
        next if line.strip.empty?

        line_number = idx + 1
        debug_log "     #{line_number}: #{line.strip}"

        begin
          test_context.module_eval(line)
        rescue HumanEval::Assert::AssertionError => e
          handle_assertion_error(e, line_number, line, model, task)
          result.push({ status: :error })
          break
        end
      end

      debug_log '  ‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
      result.push({ status: :success })
      @report.save_result(model: model, task: task, success: true)
    rescue StandardError => e
      handle_test_error(e, model, task)
      result.push({ status: :error })
    end

    def handle_assertion_error(error, line_number, line, model, task)
      debug_log "\n  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ #{line_number}:"
      debug_log "     #{line.strip}"

      if error.expected && error.actual
        debug_log "     –û–∂–∏–¥–∞–ª–æ—Å—å: #{error.expected.inspect}"
        debug_log "     –ü–æ–ª—É—á–µ–Ω–æ: #{error.actual.inspect}"
      end

      @report.save_result(model: model, task: task, success: false)
    end

    def handle_test_error(error, model, task)
      debug_log "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{error.class} - #{error.message}"
      debug_log "  ‚ùå –û—à–∏–±–∫–∞: #{error.message || 'Unknown error'}"
      @report.save_result(model: model, task: task, success: false)
    end

    def handle_test_result(result, *, **)
      case result[:status]
      when :success
        true
      when :error
        log_error_details(result[:error]) if result[:error]
        false
      when :timeout
        false
      else
        error "  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: #{result[:status]}"
        false
      end
    end

    def log_test_details(test_content, solution_file, test_context)
      debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–∞:'
      debug_log test_content
      debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è:'
      debug_log File.read(solution_file)
      debug_log '  üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:'
      debug_log test_context.methods.sort.inspect
    end

    def handle_timeout(thread)
      thread.kill
      thread.join(1) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      error "  ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (#{@timeout} —Å–µ–∫—É–Ω–¥)"
      error '     –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª'
      false
    end

    def display_total_console(tasks, models)
      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        total_tasks = tasks.size
        passed_tasks = tasks.count { |task| @results[task][model] }
        percentage = (passed_tasks * 100.0 / total_tasks).round
        [model, percentage]
      end

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, percentage| -percentage }

      # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      log "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:"
      model_stats.each do |model, percentage|
        log "- #{model}: #{colorize("#{percentage}%", percentage)}"
      end
    end

    def display_detailed_console(tasks, models)
      # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      rows = []
      tasks.each do |task|
        row = [task]
        models.each do |model|
          status = @results[task][model]
          mark = status ? DONE_MARK : FAIL_MARK
          row << mark
        end
        rows << row
      end

      # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
      header = ['Task'] + models.map { |m| m.gsub('_', "\n") }

      # –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
      table = Terminal::Table.new(
        headings: header,
        rows: rows,
        style: {
          border_x: '-',
          border_y: '|',
          border_i: '+',
          alignment: :center
        }
      )

      log "\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
      log table
    end

    def display_results(tasks, models)
      # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
      @report.results = @results
      @report.tasks = tasks
      @report.models = models

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
      @report.generate

      # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–∏ report_total
      if @options[:report_total]
        display_total_console(tasks, models)
      else
        display_detailed_console(tasks, models)
      end
    end

    def get_model_info(model_key)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã MODELS
      if defined?(HumanEval::SolverClass::MODELS)
        HumanEval::SolverClass::MODELS[model_key] || { name: model_key, provider: 'unknown' }
      else
        { name: model_key, provider: 'unknown' }
      end
    end

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –º—è–≥–∫–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    # @param text [String] —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # @return [String] –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º—è–≥–∫–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    def add_soft_hyphens(text)
      text.gsub('_', '_&shy;')
    end

    def find_solution_files(task = nil)
      pattern = task ? "tasks/#{task}-*.rb" : 'tasks/t*-*.rb'
      Dir.glob(pattern).reject { |f| f.end_with?('-assert.rb') }
    end

    def run_all_model_tests(model)
      solutions = Dir.glob("tasks/t*-#{model}.rb")
      if solutions.empty?
        error "–†–µ—à–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ #{model} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return {}
      end

      tasks = extract_tasks(solutions)

      tasks.each do |t|
        solution = Dir.glob("tasks/#{t}-#{model}.rb").first
        next unless solution && File.exist?(solution)

        begin
          success = test_solution(t, solution)
          @results[t][model] = success || false
        rescue Interrupt
          error "–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{t} –º–æ–¥–µ–ª–∏ #{model}"
          @results[t][model] = false
        end
      end

      display_results(tasks, [model])
    rescue Interrupt
      error "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏ #{model}"
    end

    def run_single_model_test(task, model)
      unless task.to_s.match?(/^t\d+$/)
        error "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
        return {}
      end

      solution = Dir.glob("tasks/#{task}-#{model}.rb").first
      if solution.nil? || !File.exist?(solution)
        error "–†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –º–æ–¥–µ–ª–∏ #{model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return {}
      end

      begin
        success = test_solution(task, solution)
        @results[task][model] = success || false
      rescue Interrupt
        error "–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –º–æ–¥–µ–ª–∏ #{model}"
        @results[task][model] = false
      end

      display_results([task], [model])
    rescue Interrupt
      error "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –º–æ–¥–µ–ª–∏ #{model}"
    end

    def calculate_model_stats
      # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks
      solutions = Dir.glob('tasks/t*-*.rb').reject { |f| f.end_with?('-assert.rb') }
      tasks = solutions.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort

      models = solutions.map do |f|
        filename = File.basename(f)
        next if filename.end_with?('_asserts.rb')

        filename.split('-')[1..].join('-').sub('.rb', '')
      end.compact.uniq.sort

      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        total_tasks = tasks.size
        passed_tasks = tasks.count { |task| @results[task][model] }
        percentage = (passed_tasks * 100.0 / total_tasks).round
        [model, percentage]
      end

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, percentage| -percentage }

      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      model_stats
    end
  end

  # –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  # @note –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  # –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Thor
  class CLI < Thor
    package_name 'Test Runner'

    class_option :report_total,
                type: :boolean,
                default: false,
                desc: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –æ—Ç—á–µ—Ç'
    class_option :log_level,
                type: :string,
                default: 'normal',
                desc: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, normal, quiet)'

    desc 'all', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã'
    method_option :report_total,
                 type: :boolean,
                 default: false,
                 desc: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –æ—Ç—á–µ—Ç'
    method_option :log_level,
                 type: :string,
                 default: 'normal',
                 desc: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, normal, quiet)'
    def all
      runner = Runner.new(options)
      runner.run_all_tests
    end

    desc 'task TASK', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏'
    method_option :report_total,
                 type: :boolean,
                 default: true,
                 desc: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –æ—Ç—á–µ—Ç'
    method_option :log_level,
                 type: :string,
                 default: 'normal',
                 desc: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, normal, quiet)'
    def task(task)
      runner = Runner.new(options)
      runner.run_task_tests(task)
    end

    desc 'model TASK MODEL', '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏'
    method_option :report_total,
                 type: :boolean,
                 default: true,
                 desc: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –æ—Ç—á–µ—Ç'
    method_option :log_level,
                 type: :string,
                 default: 'normal',
                 desc: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, normal, quiet)'
    def model(task, model)
      runner = Runner.new(options)
      runner.run_model_tests(task, model)
    end

    def self.exit_on_failure?
      true
    end

    def self.start(given_args = ARGV, config = {})
      if ENV['RACK_ENV'] != 'test' && given_args.none? { |arg| arg.include?('report-total') }
        given_args << '--report-total'
      end
      super
    end
  end
end
