# frozen_string_literal: true

module TestRunner
  # –ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
  module TestExecutor
    def run_tests(task, test_file, solution_file, model)
      test_context = create_test_context(solution_file)
      test_content = File.read(test_file)

      debug_log '  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...'
      debug_log "  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–∞:\n#{test_content}"
      debug_log "  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è:\n#{File.read(solution_file)}"
      debug_log "  üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:"
      debug_log test_context.methods.sort.inspect

      result = execute_tests_in_thread(test_context, test_content, model, task)
      debug_log "  üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: #{result.inspect}"
      success = handle_test_result(result, model, task)
      debug_log "  ‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: #{success}"
      success
    rescue StandardError => e
      error "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.message}"
      @report.save_result(model: model, task: task, success: false)
      false
    end

    def test_solution(task, solution_file)
      test_file = "tasks/#{task}-assert.rb"
      unless File.exist?(test_file)
        error "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ #{test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return false
      end

      debug_log "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è: #{solution_file}"
      debug_log "üìÑ –§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏: #{test_file}"
      model = extract_model_from_file(solution_file)
      debug_log "ü§ñ –ú–æ–¥–µ–ª—å: #{model}"
      
      result = run_tests(task, test_file, solution_file, model)
      debug_log "‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: #{result}"
      result
    rescue StandardError => e
      error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è: #{e.message}"
      false
    end

    def log_error_details(error)
      debug_log '  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:'
      debug_log "     #{error[:class]}: #{error[:message]}"
      if error[:backtrace]&.any?
        debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        error[:backtrace].each do |line|
          debug_log "       #{line}"
        end
      else
        debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        debug_log '       –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      end
    end

    private

    def create_test_context(solution_file)
      debug_log "  üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
      test_context = Module.new do
        include HumanEval::Assert
        include HumanEval::LogLevels

        class << self
          attr_accessor :log_level, :options
        end

        def self.handle_error(error)
          debug_log "Handling error: #{error.class} - #{error.message}"
          debug_log "Backtrace: #{error.backtrace&.join("\n")}"
          {
            status: :error,
            error: {
              class: error.class.name,
              message: error.message || 'Unknown error',
              backtrace: error.backtrace || []
            }
          }
        end
      end

      debug_log "  üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫..."
      load_standard_libraries(test_context)
      
      debug_log "  üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—à–µ–Ω–∏—è..."
      load_solution(test_context, solution_file)
      
      debug_log "  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞..."
      configure_test_context(test_context)
      
      debug_log "  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
      test_context
    end

    def load_standard_libraries(*)
      %w[prime set json date time base64 digest securerandom pathname].each do |lib|
        require lib
      rescue LoadError => e
        warn "  ‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ #{lib} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: #{e.message}"
      end
    end

    def load_solution(context, solution_file)
      solution_content = File.read(solution_file)
      debug_log "  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è:\n#{solution_content}"
      context.module_eval(solution_content)
    rescue StandardError => e
      warn '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤:'
      warn "     #{e.class}: #{e.message}"
      warn '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      raise
    end

    def configure_test_context(context)
      context.log_level = @options[:log_level] || :normal
      context.options = @options.dup
      debug_log "  ‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: #{context.log_level}"
    end

    def execute_tests_in_thread(test_context, test_content, model, task)
      result = Queue.new
      thread = Thread.new do
        run_tests_in_context(test_context, test_content, result, model, task)
      end

      thread.join(@timeout)
      if thread.alive?
        thread.kill
        error "  ‚ùå –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (#{@timeout} —Å–µ–∫—É–Ω–¥)"
        @report.save_result(model: model, task: task, success: false)
        return { status: :timeout }
      end

      result.pop
    end

    def run_tests_in_context(test_context, test_content, result, model, task)
      debug_log "  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ..."
      test_lines = test_content.split("\n")
      success = true

      test_lines.each_with_index do |line, idx|
        next if line.strip.empty?

        line_number = idx + 1
        debug_log "     #{line_number}: #{line.strip}"

        begin
          test_context.module_eval(line)
          debug_log "     ‚úÖ –¢–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ #{line_number} –ø—Ä–æ–π–¥–µ–Ω"
        rescue HumanEval::Assert::AssertionError => e
          handle_assertion_error(e, line_number, line, model, task)
          success = false
          break
        rescue StandardError => e
          handle_test_error(e, model, task)
          success = false
          break
        end
      end

      if success
        debug_log '  ‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        @report.save_result(model: model, task: task, success: true)
        result.push({ status: :success })
      else
        result.push({ status: :error })
      end
    end

    def handle_assertion_error(error, line_number, line, model, task)
      debug_log "\n  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ #{line_number}:"
      debug_log "     #{line.strip}"

      if error.expected && error.actual
        debug_log "     –û–∂–∏–¥–∞–ª–æ—Å—å: #{error.expected.inspect}"
        debug_log "     –ü–æ–ª—É—á–µ–Ω–æ: #{error.actual.inspect}"
      end

      @report.save_result(model: model, task: task, success: false)
    end

    def handle_test_error(error, model, task)
      debug_log "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{error.class} - #{error.message}"
      debug_log "  ‚ùå –û—à–∏–±–∫–∞: #{error.message || 'Unknown error'}"
      @report.save_result(model: model, task: task, success: false)
    end

    def handle_test_result(result, model, task)
      case result[:status]
      when :success
        true
      when :error
        log_error_details(result[:error]) if result[:error]
        false
      when :timeout
        false
      else
        error "  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: #{result[:status]}"
        false
      end
    end
  end
end 