# frozen_string_literal: true

require 'terminal-table'
require 'timeout'
require_relative 'logger'
require_relative 'assert'
require_relative 'log_levels'
require 'shellwords'
require 'fileutils'
require_relative 'human_eval_solver'
require_relative 'human_eval/report_generator'
require_relative 'human_eval/assert'

module TestRunner
  class Runner
    include HumanEval::Logger
    include HumanEval::LogLevels

    DONE_MARK = "\e[32m‚úì\e[0m" # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    FAIL_MARK = "\e[31m‚úó\e[0m" # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç

    def initialize(options = {})
      @options = options
      @results = {}
      self.log_level = @options[:log_level] || :normal
      @timeout = @options[:timeout] || 5 # –¢–∞–π–º–∞—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
    end

    def colorize(text, percentage)
      color = case percentage
              when 0..33 then "\e[31m" # –ö—Ä–∞—Å–Ω—ã–π
              when 34..66 then "\e[33m" # –ñ–µ–ª—Ç—ã–π
              else "\e[32m" # –ó–µ–ª–µ–Ω—ã–π
              end
      "#{color}#{text}\e[0m"
    end

    def run_all_tests
      tasks = find_solution_files.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort
      if tasks.empty?
        error '–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏'
        return {}
      end

      models = find_solution_files.map do |f|
        filename = File.basename(f)
        next if filename.end_with?('_asserts.rb')

        filename.split('-')[1..].join('-').sub('.rb', '')
      end.compact.uniq.sort

      @results = Hash.new { |h, k| h[k] = {} }

      tasks.each do |task|
        task_solutions = find_solution_files(task)
        debug_log "Processing task #{task} with solutions: #{task_solutions.inspect}"

        task_solutions.each do |solution|
          model = File.basename(solution).split('-')[1..].join('-').sub('.rb', '')
          debug_log "Testing solution #{solution} for model #{model}"
          success = test_solution(task, solution)
          debug_log "Test result for #{model}: #{success}"
          @results[task][model] = success
        end
      end

      debug_log "Final results: #{@results.inspect}"
      
      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
      report_data = {
        model_stats: get_model_stats,
        task_results: @results
      }
      
      HumanEval::ReportGenerator.new(report_data).generate_all
      
      display_total_console(tasks, models)
      @results
    end

    def run_task_tests(task)
      unless task.to_s.match?(/^t\d+$/)
        error "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
        return {}
      end
      test_file = "tasks/#{task}-assert.rb"
      unless File.exist?(test_file)
        error "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ #{test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return {}
      end

      solutions = find_solution_files(task)
      if solutions.empty?
        error "–†–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return {}
      end

      models = solutions.map { |s| File.basename(s).split('-')[1..].join('-').sub('.rb', '') }
      @results = Hash.new { |h, k| h[k] = {} }

      solutions.each do |solution|
        model = File.basename(solution).split('-')[1..].join('-').sub('.rb', '')
        success = test_solution(task, solution)
        @results[task][model] = success
      end

      display_results([task], models)
      @results
    end

    def run_model_tests(task, model)
      unless task.to_s.match?(/^t\d+$/)
        error "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
        return {}
      end

      unless model.to_s.match?(/^[a-zA-Z0-9_-]+$/)
        error '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏'
        return {}
      end
      solution = Dir.glob("tasks/#{task}-#{model}.rb").first

      if solution.nil?
        error "–†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –º–æ–¥–µ–ª–∏ #{model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return {}
      end

      @results = Hash.new { |h, k| h[k] = {} }
      success = test_solution(task, solution)
      @results[task][model] = success

      display_results([task], [model])
      @results
    end

    def get_model_stats
      # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks
      solutions = Dir.glob('tasks/t*-*.rb').reject { |f| f.end_with?('-assert.rb') }
      tasks = solutions.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort

      models = solutions.map do |f|
        filename = File.basename(f)
        next if filename.end_with?('_asserts.rb')

        filename.split('-')[1..].join('-').sub('.rb', '')
      end.compact.uniq.sort

      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        total_tasks = tasks.size
        passed_tasks = tasks.count { |task| @results[task][model] }
        percentage = (passed_tasks * 100.0 / total_tasks).round
        [model, percentage]
      end

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, percentage| -percentage }

      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      model_stats
    end

    private

    def test_solution(task, solution_file)
      test_file = "tasks/#{task}-assert.rb"

      unless File.exist?(solution_file)
        error "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        error "  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: #{solution_file}"
        return false
      end

      unless File.exist?(test_file)
        error "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        error "  ‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{test_file}"
        return false
      end

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
      solution_content = File.read(solution_file)
      if solution_content.strip.empty?
        error '  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –ø—É—Å—Ç'
        return false
      end

      begin
        debug_log '  üìù –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ä–µ—à–µ–Ω–∏—è...'
        temp_context = Module.new
        temp_context.module_eval(solution_content)
        debug_log '  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      rescue SyntaxError => e
        error '  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏:'
        error "     #{e.message}"
        return false
      rescue StandardError => e
        # –ï—Å–ª–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É,
        # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        warn '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:'
        warn "     #{e.class}: #{e.message}"
        warn '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
      end

      test_context = Module.new do
        include HumanEval::Assert
        include HumanEval::LogLevels

        class << self
          attr_writer :log_level
        end

        class << self
          attr_reader :log_level
        end

        class << self
          attr_writer :options
        end

        class << self
          attr_reader :options
        end

        def self.handle_error(e)
          debug_log "Handling error: #{e.class} - #{e.message}"
          debug_log "Backtrace: #{e.backtrace&.join("\n")}"
          {
            status: :error,
            error: {
              class: e.class.name,
              message: e.message || 'Unknown error',
              backtrace: e.backtrace || []
            }
          }
        end

        begin
          module_eval(solution_content)
        rescue StandardError => e
          # –ï—Å–ª–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É,
          # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
          warn '  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤:'
          warn "     #{e.class}: #{e.message}"
          warn '     –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
        end

        extend self
      end

      test_context.log_level = @options[:log_level] || :normal

      begin
        test_content = File.read(test_file)
        debug_log '  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...'
        debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–∞:'
        debug_log test_content
        debug_log '  üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ—à–µ–Ω–∏—è:'
        debug_log solution_content
        debug_log '  üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:'
        debug_log test_context.methods.sort.inspect

        result = Queue.new
        thread = Thread.new do
          # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
          test_context = Module.new do
            include HumanEval::Assert
            include HumanEval::LogLevels

            class << self
              attr_writer :log_level
            end

            class << self
              attr_reader :log_level
            end

            class << self
              attr_writer :options
            end

            class << self
              attr_reader :options
            end

            def self.handle_error(e)
              debug_log "Handling error: #{e.class} - #{e.message}"
              debug_log "Backtrace: #{e.backtrace&.join("\n")}"
              {
                status: :error,
                error: {
                  class: e.class.name,
                  message: e.message || 'Unknown error',
                  backtrace: e.backtrace || []
                }
              }
            end
          end

          test_context.module_eval(solution_content)
          test_context.extend(test_context)
          test_context.log_level = @options[:log_level] || :normal
          test_context.options = @options.dup # –î–æ–±–∞–≤–ª—è–µ–º .dup —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏

          begin
            debug_log '  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...'
            debug_log "  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è #{File.basename(solution_file)}..."

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
            debug_log '  üìù –¢–µ—Å—Ç—ã:'
            test_lines = test_content.split("\n")
            test_lines.each_with_index do |line, idx|
              next if line.strip.empty?

              line_number = idx + 1
              debug_log "     #{line_number}: #{line.strip}"

              begin
                test_context.module_eval(line)
              rescue HumanEval::Assert::AssertionError => e
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
                File.basename(solution_file).split('-')[1..].join('-').sub('.rb', '')
                task = File.basename(solution_file).split('-').first

                debug_log "\n  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ #{line_number}:"
                debug_log "     #{line.strip}"

                if e.expected && e.actual
                  debug_log "     –û–∂–∏–¥–∞–ª–æ—Å—å: #{e.expected.inspect}"
                  debug_log "     –ü–æ–ª—É—á–µ–Ω–æ: #{e.actual.inspect}"
                end

                result.push({
                              status: :error,
                              error: {
                                class: e.class.name,
                                message: e.message,
                                expected: e.expected,
                                actual: e.actual,
                                line: line_number,
                                test: line.strip
                              }
                            })
                return false
              end
            end

            debug_log '  ‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
            result.push({ status: :success })
          rescue StandardError => e
            debug_log "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.class} - #{e.message}"
            debug_log "  ‚ùå –û—à–∏–±–∫–∞: #{e.message || 'Unknown error'}"
            result.push(test_context.handle_error(e))
          rescue Exception => e
            debug_log "  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: #{e.class} - #{e.message}"
            result.push({
                          status: :error,
                          error: {
                            class: e.class.name,
                            message: e.message || 'Unknown error',
                            backtrace: e.backtrace || []
                          }
                        })
          end
        end

        begin
          Timeout.timeout(@timeout) do
            debug_log '  ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...'
            res = result.pop
            debug_log "   –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: #{res.inspect}"
            case res[:status]
            when :success
              debug_log '  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
              return true
            when :error
              error = res[:error]
              debug_log '  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:'
              debug_log "     #{error[:class]}: #{error[:message]}"
              debug_log '     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
              if error[:backtrace]&.any?
                error[:backtrace].each { |line| debug_log "       #{line}" }
              else
                debug_log '       –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
              end
              return false
            else
              error "  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: #{res[:status]}"
              return false
            end
          end
        rescue Timeout::Error
          thread.kill
          thread.join(1) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
          error "  ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (#{@timeout} —Å–µ–∫—É–Ω–¥)"
          error '     –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ä–µ—à–µ–Ω–∏–∏ –µ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª'
          false
        ensure
          thread.kill unless thread.nil? || !thread.alive?
        end
      rescue Interrupt => e
        error "\n  ‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)"
        debug_log "  üìç –ú–µ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: #{e.backtrace.first}"
        false
      rescue NoMethodError => e
        error '  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —É nil'
        error "     #{e.message}"
        debug_log "     –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
        debug_log '     –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        e.backtrace.each { |line| debug_log "       #{line}" }
        false
      rescue NameError => e
        error '  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –º–µ—Ç–æ–¥'
        error "     #{e.message}"
        debug_log "     –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
        debug_log '     –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        e.backtrace.each { |line| debug_log "       #{line}" }
        false
      rescue RegexpError => e
        error '  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏:'
        error "     #{e.message}"
        debug_log "     –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
        debug_log '     –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        e.backtrace.each { |line| debug_log "       #{line}" }
        false
      rescue StandardError => e
        error '  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:'
        error "     –¢–∏–ø: #{e.class}"
        error "     –°–æ–æ–±—â–µ–Ω–∏–µ: #{e.message}"
        debug_log "     –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
        debug_log '     –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        e.backtrace.each { |line| debug_log "       #{line}" }
        false
      rescue Exception => e
        error '  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:'
        error "     –¢–∏–ø: #{e.class}"
        error "     –°–æ–æ–±—â–µ–Ω–∏–µ: #{e.message}"
        debug_log "     –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏: #{e.backtrace.first}"
        debug_log '     –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:'
        e.backtrace.each { |line| debug_log "       #{line}" }
        false
      end
    end

    def display_total_console(tasks, models)
      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        total_tasks = tasks.size
        passed_tasks = tasks.count { |task| @results[task][model] }
        percentage = (passed_tasks * 100.0 / total_tasks).round
        [model, percentage]
      end

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, percentage| -percentage }

      # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      puts '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–æ–Ω–∞ —Ç–µ—Å—Ç–æ–≤:'
      model_stats.each do |model, percentage|
        puts "- #{model} - #{percentage}%"
      end
    end

    # –ú–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    def display_detailed_console(tasks, models)
      # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      rows = []
      model_scores = Hash.new(0)
      total_tasks = tasks.size

      tasks.each do |task|
        row = [task]
        models.each do |model|
          status = @results[task][model]
          row << (status ? DONE_MARK : FAIL_MARK)
          model_scores[model] += 1 if status
        end
        rows << row
      end

      # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
      score_row = ['Score']
      models.each do |model|
        percentage = (model_scores[model] * 100.0 / total_tasks).round
        score_row << colorize("#{percentage}%", percentage)
      end
      rows << :separator
      rows << score_row

      table = Terminal::Table.new do |t|
        t.headings = ['Task'] + models
        t.rows = rows
        t.style = {
          alignment: :center,
          padding_left: 1,
          padding_right: 1
        }
      end

      puts table
    end

    def display_results(tasks, models)
      # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –æ–±–∞ –æ—Ç—á–µ—Ç–∞
      create_reports(tasks, models)

      # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
      display_total_console(tasks, models)
    end

    # –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã MODELS
    # @param model_key [String] –∫–ª—é—á –º–æ–¥–µ–ª–∏
    # @return [Hash] –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ö–µ—à —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    def get_model_info(model_key)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã MODELS
      if defined?(HumanEval::SolverClass::MODELS)
        model_info = HumanEval::SolverClass::MODELS[model_key]
        return model_info if model_info
      end
      # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–µ—à —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
      { name: model_key, provider: 'unknown' }
    end

    # –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
    # @param model_key [String] –∫–ª—é—á –º–æ–¥–µ–ª–∏
    # @return [String] –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
    def get_display_model_name(model_key)
      model_info = get_model_info(model_key)
      name = model_info[:name]
      provider = model_info[:provider]

      if provider && provider != 'unknown'
        "#{name} (#{provider})"
      else
        model_key # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞–∫ –∏–º—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      end
    end

    def create_reports(tasks, models)
      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
      model_stats = models.map do |model|
        total_tasks = tasks.size
        passed_tasks = tasks.count { |task| @results[task][model] }
        percentage = (passed_tasks * 100.0 / total_tasks).round
        [model, percentage]
      end

      # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      model_stats.sort_by! { |_, percentage| -percentage }

      # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ reports, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      FileUtils.mkdir_p('reports')

      # –ü—É—Ç—å –∫ –æ—Ç—á–µ—Ç–∞–º
      total_report_file = File.join('reports', 'human_eval_for_ruby_report_total.html')
      full_report_file = File.join('reports', 'human_eval_for_ruby_report_full.html')

      # –û–±—â–∏–π HTML –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∏–ª–∏ –¥–ª—è –æ–±–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
      html_header = generate_html_header

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—á–µ—Ç –≤ HTML
      File.open(total_report_file, 'w') do |file|
        file.puts html_header
        file.puts '<h1>–°—É–º–º–∞—Ä–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π</h1>'
        file.puts "<p>–î–∞—Ç–∞: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}</p>"

        file.puts "<div class='model-results'>"
        file.puts '<table>'
        file.puts '<tr><th>–ú–æ–¥–µ–ª—å</th><th>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</th></tr>'

        model_stats.each do |model, percentage|
          display_name = get_display_model_name(model)
          file.puts "<tr><td>#{add_soft_hyphens(display_name)}</td><td>#{percentage}%</td></tr>"
        end

        file.puts '</table>'
        file.puts '</div>'
        file.puts '</body></html>'
      end

      # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
      task_stats = tasks.map do |task|
        total_models = models.size
        passed_models = models.count { |model| @results[task][model] }
        percentage = (passed_models * 100.0 / total_models).round
        [task, percentage]
      end

      # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ HTML
      File.open(full_report_file, 'w') do |file|
        file.puts html_header
        file.puts '<h1>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π</h1>'
        file.puts "<p>–î–∞—Ç–∞: #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}</p>"

        file.puts '<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>'

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
        file.puts '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º</h3>'
        file.puts "<div class='model-results'>"
        file.puts '<table>'
        file.puts '<tr><th>–ú–æ–¥–µ–ª—å</th><th>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</th></tr>'

        model_stats.each do |model, percentage|
          display_name = get_display_model_name(model)
          file.puts "<tr><td>#{add_soft_hyphens(display_name)}</td><td>#{percentage}%</td></tr>"
        end

        file.puts '</table>'
        file.puts '</div>'

        file.puts '<h2>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>'
        file.puts "<p>–í—Å–µ–≥–æ –∑–∞–¥–∞—á: #{tasks.size}</p>"
        file.puts "<p>–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: #{models.size}</p>"

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –º–æ–¥–µ–ª—è–º
        file.puts '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –º–æ–¥–µ–ª—è–º</h3>'
        file.puts "<div class='task-results'>"
        file.puts '<table>'

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        file.puts '<tr><th>–ó–∞–¥–∞—á–∞</th>'
        file.puts '<th>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</th>'
        models.each do |model|
          display_name = get_display_model_name(model)
          file.puts "<th>#{add_soft_hyphens(display_name)}</th>"
        end
        file.puts '</tr>'

        # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        tasks.each do |task|
          file.puts "<tr><td><a href='../tasks/#{task}.md'>#{task}</a></td>"

          # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
          task_percentage = task_stats.find { |t, _| t == task }[1]
          color_class = if task_percentage == 100
                          'success'
                        elsif task_percentage.zero?
                          'failure'
                        else
                          ''
                        end
          file.puts "<td class='#{color_class}'>#{task_percentage}%</td>"

          models.each do |model|
            status = @results[task][model]
            css_class = status ? 'success' : 'failure'
            symbol = status ? '‚úì' : '‚úó'
            file.puts "<td class='#{css_class}'>#{symbol}</td>"
          end

          file.puts '</tr>'
        end

        file.puts '</table>'
        file.puts '</div>'
        file.puts '</body></html>'
      end
    end

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å CSS-—Å—Ç–∏–ª—è–º–∏
    # @return [String] HTML-–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å CSS
    def generate_html_header
      <<~HTML
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π</title>
          <style>
            body {
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
                           Helvetica, Arial, sans-serif;
              line-height: 1.6;
              max-width: 1200px;
              margin: 0 auto;
              padding: 20px;
              color: #333;
              hyphens: auto;
              word-wrap: break-word;
              overflow-wrap: break-word;
            }
            h1, h2, h3 {
              color: #2c3e50;
            }
            table {
              border-collapse: collapse;
              width: 100%;
              margin-bottom: 20px;
              font-size: 14px;
            }
            th, td {
              hyphens: auto;
              word-wrap: break-word;
              overflow-wrap: break-word;
              border: 1px solid #ddd;
              padding: 8px;
              text-align: center;
            }
            th {
              background-color: #f2f2f2;
              position: sticky;
              top: 0;
              vertical-align: top;
            }
            tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            .success {
              color: #27ae60;
              font-weight: bold;
            }
            .failure {
              color: #e74c3c;
              font-weight: bold;
            }
            .model-results td:first-child {
              text-align: left;
              font-weight: bold;
            }
            .task-results td:first-child {
              text-align: left;
              font-weight: bold;
            }
            .task-results th {
              vertical-align: top;
            }
            @media (max-width: 768px) {
              table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
              }
            }
          </style>
        </head>
        <body>
      HTML
    end

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –º—è–≥–∫–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    # @param model [String] –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    # @return [String] –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –º—è–≥–∫–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    def add_soft_hyphens(text)
      text.gsub('_', '_&shy;')
    end

    def find_solution_files(task = nil)
      pattern = task ? "tasks/#{task}-*.rb" : 'tasks/t*-*.rb'
      Dir.glob(pattern).reject { |f| f.end_with?('-assert.rb') }
    end
  end
end
