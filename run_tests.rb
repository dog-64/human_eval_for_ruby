#!/usr/bin/env ruby

require "terminal-table"
require "pry"
require "timeout"
require_relative "lib/assert"

class TestRunner
  DONE_MARK = "\e[32m‚úì\e[0m"  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
  FAIL_MARK = "\e[31m‚úó\e[0m"  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç

  def initialize
    @results = {}
  end

  def colorize(text, percentage)
    color = case percentage
            when 0..33 then "\e[31m"    # –ö—Ä–∞—Å–Ω—ã–π
            when 34..66 then "\e[33m"   # –ñ–µ–ª—Ç—ã–π
            else "\e[32m"                # –ó–µ–ª–µ–Ω—ã–π
            end
    "#{color}#{text}\e[0m"
  end

  def run_all_tests
    if Dir.glob('tasks/t*-*.rb').empty?
      puts "–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks"
      return
    end
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks
    solutions = Dir.glob('tasks/t*-*.rb').reject { |f| f.end_with?('-assert.rb') }
    tasks = solutions.map { |f| File.basename(f) }.map { |f| f.gsub(/-.*$/, '') }.uniq.sort

    models = solutions.map do |f|
      filename = File.basename(f)
      next if filename.end_with?('_asserts.rb')
      filename.split('-')[1..-1].join('-').sub('.rb', '')
    end.compact.uniq.sort

    @results = Hash.new { |h, k| h[k] = {} }

    tasks.each do |task|
      task_solutions = Dir.glob("tasks/#{task}-*.rb").reject { |f| f.end_with?('-assert.rb') }
      
      task_solutions.each do |solution|
        model = File.basename(solution).split('-')[1..-1].join('-').sub('.rb', '')
        success = test_solution(task, solution)
        @results[task][model] = success
      end
    end

    display_results(tasks, models)
  end

  def run_task_tests(task)
    unless task.to_s.match?(/^t\d+$/)
      puts "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
      return
    end
    test_file = "tasks/#{task}-assert.rb"
    unless File.exist?(test_file)
      puts "–§–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ #{test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω"
      return
    end

    solutions = Dir.glob("tasks/#{task}-*.rb").reject { |f| f.end_with?('-assert.rb') }.sort
    models = solutions.map { |s| File.basename(s).split('-')[1..-1].join('-').sub('.rb', '') }

    @results[task] = {}

    solutions.each do |solution|
      model = File.basename(solution).split('-')[1..-1].join('-').sub('.rb', '')
      success = test_solution(task, solution)
      @results[task][model] = success
    end

    display_results([task], models)
  end

  def run_model_tests(task, model)
    unless task.to_s.match?(/^t\d+$/)
      puts "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 't<—á–∏—Å–ª–æ>' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 't1')"
      return
    end

    unless model.to_s.match?(/^[a-zA-Z0-9_-]+$/)
      puts "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"
      return
    end
    solution = Dir.glob("tasks/#{task}-#{model}.rb").first

    if solution.nil?
      puts "–†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task} –º–æ–¥–µ–ª–∏ #{model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
      return
    end

    @results[task] = {}
    success = test_solution(task, solution)
    @results[task][model] = success

    display_results([task], [model])
  end

  private

  def test_solution(task, solution_file)
    begin
      test_file = "tasks/#{task}-assert.rb"
      
      unless File.exist?(solution_file)
        puts "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        puts "  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: #{solution_file}"
        return false
      end
      
      unless File.exist?(test_file)
        puts "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
        puts "  ‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{test_file}"
        return false
      end

      puts "\n–†–µ—à–µ–Ω–∏–µ #{File.basename(solution_file)}:"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
      solution_content = File.read(solution_file)
      if solution_content.strip.empty?
        puts "  ‚ùå –§–∞–π–ª —Ä–µ—à–µ–Ω–∏—è –ø—É—Å—Ç"
        return false
      end
      
      begin
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        puts "  üìù –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ä–µ—à–µ–Ω–∏—è..."
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        temp_context = Module.new
        temp_context.module_eval(solution_content)
        puts "  ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ä–µ—à–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
      rescue SyntaxError => e
        puts "  ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏:"
        puts "     #{e.message}"
        return false
      end

      # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
      test_context = Module.new do
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –º–æ–¥—É–ª–µ –Ω–∞–ø—Ä—è–º—É—é
        module_eval(solution_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥—É–ª—è –∫–∞–∫ –º–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        extend self
      end
      
      begin
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        test_content = File.read(test_file)
        puts "  üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
        test_context.module_eval("start_time = Time.now\n" + test_content, test_file)
        puts "  ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
      rescue Timeout::Error
        puts "  ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)"
        return false
      rescue Object => e
        if e.class.name == 'AssertionError'
          puts "  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:"
          puts "     #{e.message}"
          if e.message.include?('–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ')
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞–µ–º–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            if e.message =~ /–û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (.*?), –Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ (.*?):/
              expected_error = $1
              actual_error = $2
              puts "     –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: #{expected_error}"
              puts "     –ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:  #{actual_error}"
            end
          elsif e.respond_to?(:expected) && e.respond_to?(:actual)
            puts "     –û–∂–∏–¥–∞–ª–æ—Å—å: #{e.expected.inspect}"
            puts "     –ü–æ–ª—É—á–µ–Ω–æ:  #{e.actual.inspect}"
          end
          
          if e.respond_to?(:line_info) && e.line_info
            file, line = e.line_info.split(':')
            puts "     –í —Ñ–∞–π–ª–µ #{file}:#{line}"
            if File.exist?(file)
              test_line = File.readlines(file)[line.to_i - 2]
              puts "     –¢–µ—Å—Ç: #{test_line&.strip}"
            end
          end
        else
          puts "  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:"
          puts "     –¢–∏–ø: #{e.class}"
          puts "     –°–æ–æ–±—â–µ–Ω–∏–µ: #{e.message}"
          puts "     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:"
          e.backtrace.each do |line|
            puts "       #{line}"
          end
        end
        return false
      end
      
      true
    rescue StandardError => e
      puts "  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:"
      puts "     –¢–∏–ø: #{e.class}"
      puts "     –°–æ–æ–±—â–µ–Ω–∏–µ: #{e.message}"
      puts "     –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:"
      e.backtrace.each do |line|
        puts "       #{line}"
      end
      false
    end
  end

  def display_results(tasks, models)
    rows = []
    model_scores = Hash.new(0)
    total_tasks = tasks.size

    tasks.each do |task|
      row = [task]
      models.each do |model|
        status = @results[task][model]
        row << (status ? DONE_MARK : FAIL_MARK)
        model_scores[model] += 1 if status
      end
      rows << row
    end

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
    score_row = ['Score']
    models.each do |model|
      percentage = (model_scores[model] * 100.0 / total_tasks).round
      score_row << colorize("#{percentage}%", percentage)
    end
    rows << :separator
    rows << score_row

    table = Terminal::Table.new do |t|
      t.headings = ['Task'] + models
      t.rows = rows
      t.style = { 
        alignment: :center,
        padding_left: 1,
        padding_right: 1
      }
    end

    puts table
  end
end

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
runner = TestRunner.new

if ARGV.empty?
  runner.run_all_tests
elsif ARGV.length == 1
  runner.run_task_tests(ARGV[0])
elsif ARGV.length == 2
  runner.run_model_tests(ARGV[0], ARGV[1])
else
  puts "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
  puts "  ruby run_tests.rb                    # –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
  puts "  ruby run_tests.rb t8                 # –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ t8"
  puts "  ruby run_tests.rb t8 deepseek        # –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ t8 –¥–ª—è –º–æ–¥–µ–ª–∏ deepseek"
end 
